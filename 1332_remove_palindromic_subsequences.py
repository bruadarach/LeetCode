'''
Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
A string is called palindrome if is one that reads the same backward as well as forward.
 

Example 1:

Input: s = "ababa"
Output: 1
Explanation: String is already palindrome

Example 2:

Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:

Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".

Example 4:

Input: s = ""
Output: 0
 

Constraints:

0 <= s.length <= 1000
s only consists of letters 'a' and 'b'
'''



'''
<< Good to Know >> 
You need to know the difference between subarray and subsequence.
Subarray need to be consecutiveã€‚
Subsequence don't have to be consecutive.

The definition of "subsequence" is sneaky in this problem. Apparently, a subsequence doesn't have to be continuous in the original string.
"A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order."

Algorithm:
Given two alphabet a and b. At most two operations are required, one to delete all a and another to delete all b. But if the input string is already empty, no operation is necessary; if the input string is palindrome, 1 operation is enough.

Analysis:
Time complexity O(N)
Space complexity O(N)
'''

class Solution:
    def removePalindromeSub(self, s: str) -> int:

            if s == "":
                return 0
            elif s[:] == s[::-1]:
                return 1
            else:
                return 2

# (runtime / memory)
#  28 ms / 14.1 MB



'''
class Solution:
    def removePalindromeSub(self, s: str) -> int:
        
            return 0 if len(s) == 0 else 1 if s == s[::-1] else 2
'''
# (runtime / memory)
#  24 ms / 14.2 MB

